extends ../../layout

block hero-title
  h1 Forms

block hero-example
  form.form
    label Email
    input(type="email" placeholder="john@example.com")
    
    input(value="Subscribe" type="submit" role="button")

block basic
  form.form
    label First Name
    input(type="text" placeholder="John")

    label Last Name
    input(type="text" placeholder="Smith")

    label Issue size
    label
      input(type="radio" name="issue")
      |  Small issue
    label
      input(type="radio" name="issue")
      |  Regular issue
    label
      input(type="radio" name="issue")
      |  Large issue

    label Shipping options
    label
      input(type="checkbox")
      |  Fast shipping
    label
      input(type="checkbox")
      |  Gift-wrapping

    label Subscription frequency
    select
      option Daily
      option Weekly
      option Monthly
      option Yearly

    label Bio
    textarea

    input(value="Subscribe" type="submit" role="button")

block variations
  :markdown
    ### Horizontal

    `textarea` elements are not included in default styling of horizontal
    forms.

  form.form-horizontal
    label First Name
    input(type="text" placeholder="John")

    label Last Name
    input(type="text" placeholder="Smith")

    label Industry
    select
      option Academic
      option Automotive
      option Finance
      option Government
      option Medical
      option Restaurant
      option Technology

    input(type="submit" role="button")

  :markdown
    ### Left-aligned

    Labels and form elements align to the center line of the form width.

  form.form-left
    label First Name
    input(type="text" placeholder="John")

    label Last Name
    input(type="text" placeholder="Smith")

    label Bio
    textarea

    label Industry
    select
      option Academic
      option Automotive
      option Finance
      option Government
      option Medical
      option Restaurant
      option Technology

    input(type="submit" role="button")

  :markdown
    ### Validation

    Kickstart is very feature-forward when it comes to form validation.

    While there are classes for optionally adding color to indicate errors, HTML5
    already has a great API for validating for fields. Using this instead of 
    an additional JavaScript library works much better for page performance and 
    requires less wheel-reinventing than having to include more code in the CSS/JS.

  form
    label.error First Name
    input.error(type="text" placeholder="John")

    label.success First Name
    input.success(type="text" placeholder="John")

    label.error First Name
    input.warning(type="text" placeholder="John")

  .if-semantic
    :markdown
      For this particular use case, there is no semantic version of the 
      validation coloring classes.

  :markdown
    Keep in mind the native HTML5 validation to follow *does color forms* based
    on errors. For this reason, it's strongly encouraged to hold off on using 
    these classes until you absolutely have to.

    To help you use HTML5 form validation, this page will show you a few easy
    ways to validate form fields using native rules directly in the markup.

    #### Input types

    One of the simplest ways to validate a field is simply to use the right
    `type` on an input form. Try entering invalid information into these:

  form(action="/")
    label(for="email") Email
    input(type="email" name="email")
    input(type="submit")

