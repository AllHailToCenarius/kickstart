extends ../../layout

block hero-title
  h1 Modals

block hero-example
  button.button.blue#launchSampleModal Launch modal

block basic
  #sampleModal.modal
    header
      h1 Modal
    main
      p Hi, I'm a modal.
    footer
      ul
        li
          a.button(href="#") Close

  h3 JavaScript
  p
    | Turn any element into a modal using&nbsp;
    code k$.modal()

  p
    pre
      code // Instantiate and assign your modal in one line.
        | var $signup = k$.modal(&quot;.signup&quot;)

  .ifnot-jquery
    :markdown
      <span>

          // Show modal
          $signup.style.display = 'block'

          // Hide modal
          $signup.style.display = 'none'

  .if-jquery
    :markdown
      <span>

          // Show modal
          $($signup).show();

          // Hide modal
          $($signup).hide();

  h4 Events
  :markdown
    Stopping propagation on any click you don't wish to close the modal is
    required. This is as easy as:

  .if-jquery
    :markdown
      <span>

          $('button').click(function(e) {
            $($modal).show();
            e.stopPropagation();
          });

  .ifnot-jquery
    :markdown
      <span>

          $button = document.querySelector('#myButton');
          $button.addEventListener('click', function(e) {
            $modal.style.display = 'block';
            e.stopPropagation();
          })

  :markdown
    Notice the `e` (event) in the function params as well as
    `e.stopPropagation()`. This is to prevent "event bubbling," which would cause
    JavaScript to think you are both clicking on the modal and clicking outside
    of it (which would close the modal.)


  h3 Styling
  p
    | For default modal styling (not required to function),
    span.if-semantic
      |  just include&nbsp;
      code modal()
    span.ifnot-semantic
      |  use the&nbsp;
      code .modal
      |  class.

    .if-semantic
      :markdown
        <span>

            <div class="myModal">
              <h1>Hello</h1>
            </div>

            .myModal {
              @include modal();
            }

    .ifnot-semantic
      :markdown
        <span>

            <div class="modal">
              <h1>Hello</h1>
            </div>

block variations
  :markdown
    By default, the modal doesn't come with much styling. This is to allow for more
    creativity in styling the contents.

    However, by structuring the direct children as HTML5 `header`, `main`, and `footer`,
    the modal will take on some clean styling for showing as a window.

  .example
    .modal.example
      header
        h1 How would you like to pay?

      main
        p Please make a selection:
        ul
          li: a(href="#") Visa
          li: a(href="#") Mastercard
          li: a(href="#") American Express

      footer
        ul
          li: a.button(href="#") Cancel
          li: a.button.primary(href="#") Next &raquo;

  :markdown
    <span>

        <aside class="modal">
          <header>
            <h1>How would you like to pay?</h1>
          </header>
          <main>
            <p>Please make a selection</p>
            <ul>
              <li>
                <a href="#">Visa</a>
              </li>
              <li>
                <a href="#">Mastercard</a>
              </li>
              <li>
                <a href="#">American Express</a>
              </li>
            </ul>
          </main>
          <footer>
            <ul>
              <li>
                <a class="button" href="#">Cancel</a>
              </li>
              <li>
                <a class="button primary" href="#">Next &raquo;</a>
              </li>
            </ul>
          </footer>
        </aside>

  .if-semantic
    :markdown
      <span>

          .modal {
            @include modal();
          }

block postJS
  script.
    k$.nav('.docs-nav');
    $sampleModal = k$.modal('#sampleModal');
    k$.$('#launchSampleModal').addEventListener('click', function(e) {
      $sampleModal.style.display = 'block';
      e.stopPropagation();
    })
