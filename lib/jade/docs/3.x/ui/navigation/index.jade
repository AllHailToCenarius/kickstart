extends ../../layout

block hero-title
  h1 Navigation

block hero-example
  .sample-nav.navbar
    nav
      ul
        li Acme Enterprises
        li
          a(href="#") Home
        li
          | Pages
          ul
            li
              a(href="#") Blog
            li
              a(href="#") Contact Us
      ul
        li
          a(href="#") Login
        li
          a.button(href="#" role="button") Signup

  .pagination
    ul
      li: a(href="#") &laquo; Prev

    ul
      li: a(href="#") 1
      li: a(href="#") 2
      li: a(href="#") 3
      li: a(href="#") 4
      li: a(href="#") 5

    ul
      li: a(href="#") Next &raquo;

block basic
  :markdown
    ## Bars

    Navigation bars consist of three elements:

    1. The container (Your choice of element)
    1. The menu (`nav`)
    1. The menu items (`ul li` structure)

    <span>

        <div class="navbar">
          <nav>
            <ul>
              <li>
                <a href="#">Home</a>
              </li>
              <li>
                <a href="#">Blog</a>
              </li>
            </ul>
            <ul>
              <li>
                <a href="#">Login</a>
              </li>
            </ul>
          </nav>
        </div>

  .if-semantic
    :markdown
      <span>

          .navbar {
            @include navbar();
          }

  :markdown
    ## Pagination

    Pagination styling is very similar to the navigation bar. As such, the
    markup is also very similar and
    <span class="ifnot-semantic">a <code>.pagination-dark</code> class is available.</span>
    <span class="if-semantic">a <code>$background-color</code> can be passed in to <code>pagination()</code></span>.

  .example
    .pagination
      ul
        li: a(href="#") &laquo; Prev
      ul
        li: a(href="#") Next &raquo;

  :markdown
    <span>

        <div class="pagination">
          <ul>
            <li>
              <a href="#">&laquo; Prev</a>
            </li>
            <li>
              <a href="#">Next &raquo;</a>
            </li>
          </ul>
        </div>

        <!-- laquo/raquo stand for "left and right angle quotes" -->

  .if-semantic
    :markdown
      <span>

          .pagination {
            @include pagination();
          }


block variations
  h2 Bars

  h3 Primary and secondary menus

  :markdown
    The first `ul` is automatically left aligned. Adding another will treat the
    second as a secondary menu and align it right. Adding more than two `ul`s
    will simply continue to follow CSS flexbox rules.

  .navbar
    nav
      ul
        li
          a(href="#") Left

  :markdown
    <span>

        <div class="navbar">
          <nav>
            <ul>
              <li>
                <a href="#">Left</a>
              </li>
            </ul>
          </nav>
        </div>

  .navbar
    nav
      ul
        li
          a(href="#") Left
      ul
        li
          a(href="#") Right

  :markdown
    <span>

        <div class="navbar">
          <nav>
            <ul>
              <li>
                <a href="#">Left</a>
              </li>
            </ul>
            <ul>
              <li>
                <a href="#">Right</a>
              </li>
            </ul>
          </nav>
        </div>

  :markdown

    Why not just have `<nav>` without the extra div above? This is to give you 
    more separation between the flexbox elements and the container it sits in. 
    Flexbox display settings will affect the direct descendants. The need for 
    this separation becomes clearer as the navbar becomes more complex, such 
    as the addition of a wrapper inside the container.

    ### Layout Styles

    Navbars can have either default, fluid, or fluid-fixed layouts.

    #### No style

    By default, navbars have a layout parameter of "none" This is best for navigation bars
    that are in the page itself, and not integrated into the master layout of the page.

    ![Navbar with layout of "none" (Default)](/img/nav_none.png)

    #### Fluid

    You may want your navbar contents to be full width, but keep a healthy
    margin on the left and right. This is especially important on smaller
    screens.

    ![Navbar with layout of "fluid" (Default)](/img/nav_fluid.png)

  .ifnot-semantic
    :markdown
      <span>

          <div class="navbar navbar-fluid">
            <div class="container">
              <nav>
                <ul>
                  <li>
                    <a href="#">Home</a>
                  </li>
                </ul>

                <ul>
                  <li>
                    <a href="#">Login</a>
                  </li>
                </ul>
              </nav>
            </div>
          </div>

          <main>
            <div class="container">
              <h1>Hello world</h1>
            </div>
          </main>

      Simply use the `.fluid` helper class to enable container fluid.

  .if-semantic
    :markdown
      <span>

          <div class="mynavbar">
            <div class="mycontainer">
              <nav>
                <ul>
                  <li>
                    <a href="#">Home</a>
                  </li>
                </ul>

                <ul>
                  <li>
                    <a href="#">Login</a>
                  </li>
                </ul>
              </nav>
            </div>
          </div>

          <main>
            <div class="mycontainer">
              <h1>Hello world</h1>
            </div>
          </main>

          .mycontainer {
            @include container();
          }
          .mynavbar {
            @include navbar($layout: 'fluid');
          }

      Simply pass in `'fluid'` to the `$layout` parameter to enable a fluid container.

  :markdown
    #### Fluid-Fixed

    Fluid fixed layouts allow your navbar's container to be as wide as you want, but
    still keep the contents in the same container as any other element using `container()`.

    The underlying logic for this is more tricky than it appears, as the navbar will
    adjust itself in a way that the first and last menu items align, not by their edges, 
    but the edges of the text inside them.

    ![Navbar with layout of "fluid-fixed" (Default)](/img/nav_fluid-fixed.png)

  .if-semantic 
    :markdown
      For a fluid-fixed layout, pass in `'fluid-fixed'` to the `$layout` parameter.

          .navbar { @include navbar($layout: 'fluid-fixed'); }

  .ifnot-semantic
    :markdown
      For a fluid fixed layout, use the `.navbar-fluid_fixed` class.

          <div class="navbar navbar-fluid_fixed">
            <nav>
              <ul>
                ...
              </ul>
            </nav>
          </div>

  :markdown
    ### Dropdowns

    To create a dropdown, simply nest another `ul` in one of your `li`s.

    Dropdowns require the `k$.nav(el)` function to be called on the bar. `el` is
    the selector for the navbar container.

  .navbar.sample-dropdown-nav
    nav
      ul
        li
          | Options
          ul
            li
              a(href="#") Option 1
            li
              a(href="#") Option 2
            li
              a(href="#") Option 3

  :markdown
    <span>

        <div class="navbar">
          <ul>
            <li>Options
              <ul>
                <li>
                  <a href="#">Option1</a>
                </li>
                <li>
                  <a href="#">Option2</a>
                </li>
                <li>
                  <a href="#">Option3</a>
                </li>
              </ul>
            </li>
          </ul>
        </div>

  :markdown
    <span>

        k$.navbar('.navbar')

    ### Coloring navbar

    Coloring the navbar just means changing the color of the container. However,
    darker colors might mean using lighter colors for the text for better contrast.

  .if-semantic
    :markdown
      For this, pass in a color to the `$background` parameter of `navbar()`

          @include navbar($background: #333)

      `navbar()` will try to guess if the color is dark enough to warrant
      lighter text and automatically switch to white if so.

  .ifnot-semantic
    :markdown
      For a darker navbar with lighter text, use `.navbar-dark`

          <div class="navbar-dark">
            <nav>
              ...
            <nav>
          </div>

  h3 Responsive
  :markdown
    #### Collapse items

    To use a collapse button on the navbar instead of flowing the menu items,
    you'll need to define a few settings.

  .if-semantic
  :markdown
    First, tell the navbar that its items should collapse.

        .navbar.navbar-collapse {
          @include navbar($collapse: true);
        }

    At this point, all `li`s except for `.navbar-title` will disappear. Be sure to
    add this, even if you only put the responsive button inside.

        <div class="navbar navbar-collapse">
          <nav>
            <ul>
              <!-- This will be the title and
                   the responsive collapse button -->
              <li class="navbar-title">
                <h1>Acme Corp</h1>
                <button role="button">=</button>
              </li>

              <!-- These are the collapsed navigation
                   items. -->

              <li>
                <a href="/products/">Products</a>
              </li>
              <li>
                <a href="/blog/">Blog</a>
              </li>
            </ul>
          </nav>
        <div>

    The `=` in the responsive button should automatically be changed to a three-bar icon.

    #### Define a breakpoint (optional)

    By default, the navbar will collapse menu items at screen sizes narrower than a tablet
    (according to the width defined as `$tablet`). To customize this, you can change the `$breakpoint`.
        .navbar {
          @include navbar($breakpoint: $tablet, $collapse: true);
        }

    The `$breakpoint` is simply the screen width at which responsive styling
    should cease to be applied. In the above example, we use one of the provided
    screen size variables. However, you may also pass in a css measurement value.

        @include navbar($breakpoint: 768px, $collapse: true);
        @include navbar($breakpoint: 200em, $collapse: true);
        @include navbar($breakpoint: 500pt, $collapse: true);

  +screen-sizes


  h2 Pagination 
  .example
    .pagination
      ul
        li: a(href="#") 1
        li: a(href="#") 2
        li: a(href="#") 3
        li: a(href="#") 4
        li: a(href="#") 5

  :markdown
    <span>

        <div class="pagination">
          <ul>
            <li>
              <a href="#">1</a>
            </li>
            <li>
              <a href="#">2</a>
            </li>
            <li>
              <a href="#">3</a>
            </li>
            <li>
              <a href="#">4</a>
            </li>
            <li>
              <a href="#">5</a>
            </li>
          </ul>
        </div>

  h3 Multiple controls

  .example
    .pagination
      ul
        li: a(href="#") &laquo; Prev

      ul
        li: a(href="#") 1
        li: a(href="#") 2
        li: a(href="#") 3
        li: a(href="#") 4
        li: a(href="#") 5

      ul
        li: a(href="#") Next &raquo;

  h3 Other options
  p Adding the <code>disabled</code> attribute will signal to the user the option is not available.

  .pagination
    ul
      li: a(href="#") 1
      li: a(href="#" disabled) 2

  :markdown
    <span>

        <div class="pagination">
          <ul>
            <li>
              <a href="#">1</a>
            </li>
            <li>
              <a href="#" disabled>2</a>
            </li>
          </ul>
        </div>


block postJS
  script.
    k$.nav('.docs-nav')
    k$.nav('.sample-nav')
    k$.nav('.sample-dropdown-nav')
