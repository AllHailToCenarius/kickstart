extends ../../layout

block hero-title
  h1 Navigation

block hero-example
  .sample-nav.navbar
    nav
      ul
        li Acme Enterprises
        li
          a(href="#") Home
        li
          | Pages
          ul
            li
              a(href="#") Blog
            li
              a(href="#") Contact Us
      ul
        li
          a(href="#") Login

block meta
  table
    tr.if-semantic
      td Mixin
      td
        code navbar()

block toc-variations
  ul
    li
      a(href="#primary-secondary") Primary and secondary menus
    li
      a(href="#combining") Combining with other elements
    li
      a(href="#full-width") Full width

block basic
  :markdown
    ## Bars

    Navigation bars consist of three elements:

    1. The container (Your choice of element)
    1. The menu (`nav`)
    1. The menu items (`ul li` structure)

    <span>

        <div class="navbar">
          <nav>
            <ul>
              <li>
                <a href="#">Home</a>
              </li>
              <li>
                <a href="#">Blog</a>
              </li>
            </ul>
            <ul>
              <li>
                <a href="#">Login</a>
              </li>
            </ul>
          </nav>
        </div>

  .if-semantic
    :markdown
      <span>

          .navbar {
            @include navbar();
          }

block variations
  <h3 id="primary-secondary">Primary and secondary menus</h3>
  :markdown
    The first `ul` is automatically left aligned. Adding another will treat the
    second as a secondary menu and align it right. Adding more than two `ul`s
    will simply continue to follow CSS flexbox rules.

  .navbar
    nav
      ul
        li
          a(href="#") Left

  :markdown
    <span>

        <div class="navbar">
          <nav>
            <ul>
              <li>
                <a href="#">Left</a>
              </li>
            </ul>
          </nav>
        </div>

  .navbar
    nav
      ul
        li
          a(href="#") Left
      ul
        li
          a(href="#") Right

  :markdown
    <span>

        <div class="navbar">
          <nav>
            <ul>
              <li>
                <a href="#">Left</a>
              </li>
            </ul>
            <ul>
              <li>
                <a href="#">Right</a>
              </li>
            </ul>
          </nav>
        </div>

  :markdown

    ### About the structure

    Why not just have `<nav>`? This is to give you more separation between the
    flexbox elements and the container it sits in. Flexbox display settings will
    affect the direct descendants. The need for this separation becomes clearer
    as the navbar becomes more complex, such as the addition of a wrapper inside
    the container.

  <h3 id="combining">Combining with other elements</h3>

  :markdown
    Try mixing and matching with other elements, especially buttons and inputs.

        <div class="navbar">
          <nav>
            <ul>
              <li>
                <a href="#">Home</a>
              </li>
              <li>
                  <a class="button" href="#" role="button">Sign Up</a>
              </li>
            </ul>
          </nav>
        </div>

  .if-semantic
    :markdown
      <span>

          .navbar {
            @include navbar();
          }
          .button {
            @include button();
          }

      Don't forget to add `role="button"` when using buttons in the navbar.

  <h3 id="full-width">Full width</h3>

  :markdown
    A common layout is to use the navbar at the top of the page, full width,
    with a container. By itself, the left and right padding will prevent it from
    lining up with the margins of `container()`

        <div class="mynavbar">
          <div class="mycontainer">
            <nav>
              <ul>
                <li>
                  <a href="#">Home</a>
                </li>
              </ul>

              <ul>
                <li>
                  <a href="#">Login</a>
                </li>
              </ul>
            </nav>
          </div>
        </div>

        <main>
          <div class="mycontainer">
            <h1>Hello world</h1>
          </div>
        </main>

        .mycontainer {
          @include container();
        }
        .mynavbar {
          @include navbar($bleed-container: true);
        }

    Simply pass in `true` to the `$bleed-container` parameter to enable container bleed.

    ### Dropdowns

    To create a dropdown, simply nest another `ul` in one of your `li`s.

    Dropdowns require the `k$.nav(el)` function to be called on the bar. `el` is
    the selector for the navbar container.

  .navbar.sample-dropdown-nav
    nav
      ul
        li
          | Options
          ul
            li
              a(href="#") Option 1
            li
              a(href="#") Option 2
            li
              a(href="#") Option 3

  :markdown
    <span>

        <div class="navbar">
          <ul>
            <li>Options
              <ul>
                <li>
                  <a href="#">Option1</a>
                </li>
                <li>
                  <a href="#">Option2</a>
                </li>
                <li>
                  <a href="#">Option3</a>
                </li>
              </ul>
            </li>
          </ul>
        </div>

  :markdown
    <span>

        k$.navbar('.navbar')

  :markdown

    ### Breadcrumbs

    ### Pagination

block postJS
  script.
    k$.nav('.docs-nav')
    k$.nav('.sample-nav')
    k$.nav('.sample-dropdown-nav')
