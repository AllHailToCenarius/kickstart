extends ../../layout

mixin colors 
  p
    span.tooltip_trigger
      a(href="#") Hover
      span.tooltip I'm a tooltip!
    | &nbsp;
    span.tooltip_trigger
      a(href="#") over
      span.tooltip.tooltip-red I'm a tooltip!
    | &nbsp;
    span.tooltip_trigger
      a(href="#") any
      span.tooltip.tooltip-orange I'm a tooltip!
    | &nbsp;
    span.tooltip_trigger
      a(href="#") of
      span.tooltip.tooltip-yellow I'm a tooltip!
    | &nbsp;
    span.tooltip_trigger
      a(href="#") these
      span.tooltip.tooltip-green I'm a tooltip!
    | &nbsp;
    span.tooltip_trigger
      a(href="#") words
      span.tooltip.tooltip-blue I'm a tooltip!

block hero-title
  h1 Tooltips

block hero-example
  +colors

block basic
  h2 Single element
  button(data-ks-tooltip="I'm a tooltip") Hover over me

  :markdown
    <span>

        <button class="button" data-ks-tooltip="I'm a tooltip">Hover over me</button>

    Tooltips are implemented in a dataset attribute of the HTML.

    Tooltips have a **trigger** (the hovered item that launches the tooltip)
    and an **anchor** (the element the tooltip anchors to).

    ## Optional trigger

    By default, the trigger and the anchor are the same element. However,
    an optional <span class="ifnot-semantic"><code>.tooltip_trigger</code> class</span>
    <span class="if-semantic"><code>tooltip-trigger()</code> mixin</span> is available.
    This defines a general hover zone where child tooltips will show.

  .tooltip_trigger.example
    button.button.button-blue(data-ks-tooltip="Close the window") Close
    | &nbsp;
    button.button.button-blue(data-ks-tooltip="Try a different screen") Next

  .alert
    :markdown
      # Caution

      Tooltips in the `.tooltip_trigger` zone anchor themselves to `.tooltip_trigger`
      as opposed to individual elements inside

  .ifnot-semantic
    :markdown
      <span>

          <div class="tooltip_trigger">
            <button class="button" data-ks-tooltip="Close the window">Close</button>
            <button class="button" data-ks-tooltip="Try a different screen">Next</button>
          </div>

  .if-semantic
    :markdown
      <span>

          <div class="decision">
            <button class="close" data-ks-tooltip="Close the window">Close</button>
            <button class="next" data-ks-tooltip="Try a different screen">Next</button>
          </div>

          .decision {
            @include tooltip_trigger();
          }
          .close, .next {
            @include button();
          }

  :markdown 
    ## Tooltips as elements

    Adding content to the dataset of an element only allow for plaintext. 
    However, your tooltips may need something more sophisticated that can 
    only be expressed by HTML.

    For this, tooltips can also be created as individual HTML elements.

  .example
    p 
      | The rain in&nbsp;
      span.tooltip_trigger
        a(href="#") Spain
        span.tooltip <img src="/img/spain.png" style="width: 50px; margin: 0px auto;display: block;"/>Spain is a country in <em>Europe</em>.
      |  falls mainly on the plains.
    

  .ifnot-semantic
    :markdown
      <span>

          <p>The rain in
            <span class="tooltip_trigger">
              <a href="#">Spain</a>
              <span class="tooltip">Spain is a country in <em>Europe</em></span>
              falls mainly on the plain.
            </span>
          </p>

  .if-semantic
    :markdown
      <span>

          <p>The rain in
            <span class="country">
              <a href="#">Spain</a>
              <span class="tooltip">Spain is a country in <em>Europe</em></span>
              falls mainly on the plain.
            </span>
          </p>

          .country {
            @include tooltip_trigger();
          }

      Note there is no special mixin for `.tooltip` as the content is so specific
      to being a tooltip, the class should be semantic already.

block variations
  :markdown
    ## Coloring

  +colors

  .if-semantic
    :markdown 
      Tooltips use their background color for more properties than just CSS
      background color. For this reason, it's best to feed this color into
      the mixin for `tooltip_trigger()`.

          .tooltip_trigger {
            @include tooltip_trigger(map-get($colors, yellow));
          }

      However, if you need different colored tooltips in a single trigger
      area, you will need to define this color for two places:

          .tooltip_trigger {
            
            .tooltip1 {
              background-color: map-get($colors, green);
              &:after {
                border-top-color: map-get($colors, green);
              }
            }

            .tooltip1 {
              background-color: map-get($colors, yellow);
              &:after {
                border-top-color: map-get($colors, yellow);
              }
            }

          }

  .ifnot-semantic
    :markdown
      To choose a color, simply add `.tooltip-[color]` with the `.tooltip` class.

          <span class="tooltip tooltip-yellow">Click for more information</span>

    +available-colors

  :markdown
    ## Positioning

    Tooltips can be positioned to the top, left, right, or bottom.

  .tooltip_trigger
    button.button Top
    span.tooltip I'm on top
    | &nbsp;
  .tooltip_trigger
    button.button Left
    span.tooltip.tooltip-left I'm on the left
    | &nbsp;
  .tooltip_trigger
    button.button Right
    span.tooltip.tooltip-right I'm on the right
    | &nbsp;
  .tooltip_trigger
    button.button Bottom
    span.tooltip.tooltip-bottom I'm on the bottom

  :markdown
    By default, tooltips will be positioned "top". To position left, right, or bottom,
    add this position as a `.tooltip-[position]` class.

        <div class="tooltip_trigger">
          <p>Left</p>
          <span class="tooltip tooltip-left">I'm on the left.
        </div>

  .if-semantic
    :markdown
      This is applied directly to the tooltip instead of the trigger to
      allow for the possibility of multiple tooltips with different positions
      in a single trigger area.

  :markdown
    ## In blocks of text

    Because of html rules concerning nesting block versus inline elements, it's
    important to avoid using block tags (like `<p>` or `<div>`) in text tags.

  p 
    | Here is&nbsp;
    a.tooltip_trigger(href="#")
      span a very long string of text which uses a tooltip but it's very long, so, you know.
      span.tooltip That's good.
    |  You can rest assured the block of text keeps going on and on.

  :markdown
    <span>

        <p>
          Here is
          <span class="tooltip-trigger">
            a very long string of text...
            <span class="tooltip">That's good</span>
          </span>
        </p>

    ## Multiple tooltips in one trigger

    By separating the trigger and the tooltip into separate elements, we can
    do some pretty cool things, like show multiple tooltips in one trigger
    area.

  .row
    .col-6.tooltip_trigger
      .example
        ul
          li
            a(href="#") 
              | My account
              .tooltip.tooltip-green Start here
          li: a(href="#") Dashboard
          li: a(href="#") Settings
          li: a(href="#") Recent
          li
            a(href="#") 
              | Favorites
              .tooltip.tooltip-left Check back here for items you've favorited.
          li: a(href="#") Updates

    .col-6.tooltip_trigger
      .example

