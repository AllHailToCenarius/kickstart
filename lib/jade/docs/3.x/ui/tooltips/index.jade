extends ../../layout

mixin colors 
  .tooltip_trigger
    a(href="#") Hover&nbsp;
    .label I'm a tooltip!

  .tooltip_trigger
    a(href="#") over&nbsp;
    .label.red I'm a tooltip!

  .tooltip_trigger
    a(href="#") any&nbsp;
    .label.orange I'm a tooltip!

  .tooltip_trigger
    a(href="#") of&nbsp;
    .label.yellow I'm a tooltip!

  .tooltip_trigger
    a(href="#") these&nbsp;
    .label.green I'm a tooltip!

  .tooltip_trigger
    a(href="#") words&nbsp;
    .label.blue I'm a tooltip!

block hero-title
  h1 Tooltips

block hero-example
  +colors

block basic
  :markdown
    For performance reasons, tooltips work mainly through CSS, using JavaScript
    mainly for making minor on-screen adjustments.

    To create a tooltip, you must first define what triggers that tooltip when
    hovered.

  .ifnot-semantic
    :markdown
      <span>

          <div class="tooltip_trigger">
            <button class="button">Close</button>
          </div>

  .if-semantic
    :markdown
      <span>

          <div class="decision">
            <button class="close">Close</button>
          </div>

          .decision {
            @include tooltip_trigger();
          }
          .close {
            @include button();
          }

  :markdown 
    When hovering over `.tooltip_trigger`, any `.tooltip`
    classes contained inside will become visible.


  :markdown
    <span>

  .ifnot-semantic
    :markdown
      <span>

          <div class="tooltip_trigger">
            <button class="button">Close</button>
            <span class="tooltip">Make sure you've finished your application!</span>
          </div>

  .if-semantic
    :markdown
      <span>

          <div class="decision">
            <button class="button">Close</button>
            <span class="tooltip">Make sure you've finished your application!</span>
          </div>

          .decision {
            @include tooltip_trigger();
          }
          .close {
            @include button();
          }

      Note there is no special mixin for `.tooltip` as the content is so specific
      to being a tooltip, the class should be semantic already.

block variations
  :markdown
    ## Coloring

  +colors

  .if-semantic
    :markdown 
      `tooltip()` is a very basic piece of HTML and shouldn't need any parameters
      for coloring.

      For this reason, it is easiest to simply declare background and foreground
      colors directly in the CSS.

          .tooltip {
            +tooltip();
            background: $yellow;
            color: white;
          }

  .ifnot-semantic
    :markdown
      To choose a color, simply add `.tooltip-[color]` with the `.tooltip` class.

          <span class="tooltip tooltip-yellow">Click for more information</span>

    +available-colors
