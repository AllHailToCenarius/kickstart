extends ../layout

block hero-title
  h1 Grid

block toc-basic
  ul
    li
      a(href="#use-shortcuts") Use shortcuts
    li
      a(href="#use-numbers") Use numbers
    li
      a(href="#pulls") Pulls

block toc-variations
  ul
    li
      a(href="#responsive") Responsive

block basic

  .example(style="display: none")
    .row
      .test-a: .col-example foo
      .col.col-third.col-pull-xs-1.col-pull-rg-3: .col-example foo

  .example
    .row
      .col-third
        .col-example
          p I'm 4 columns on desktop monitors...
          p 6 columns on tablets...
          p and 12 (full) columns on mobile.

      .col-twothirds
        .col-example
          p I'm eight columns on desktop monitors...
          p 6 columns on tablets
          p and 12 (full) columns on mobile.

  .ifnot-semantic
    :markdown
      <span>

          <section class="row">
            <aside class="col-third">
              <p>Sidebar</p>
            </aside>
            <main class="col-twothirds">
              <p>Main Pane</p>
            </main>
          </section>

  .if-semantic
    :markdown
      <span>

          <section class="application">
            <aside class="sidebar">
              <p>Sidebar</p>
            </aside>
            <main class="mainpane">
              <p>Main Pane</p>
            </main>
          </section>

    :markdown
      <span>

          .application {
            @include row();
          }
          .sidebar {
            @include column('third');
          }
          .mainpane {
            @include column('twothirds');
          }

  :markdown

    The grid includes three components

    1. A container
    1. A row
    1. A column

    The **container** is optional. This creates a fixed width container for the
    grid elements. The fixed width automatically resizes based on screen width.

  .ifnot-semantic
    :markdown
      <span>

          <div class="container">
            ...
          </div>

  .if-semantic
    :markdown
      <span>

          <div class="wrapper">
            ...
          </div>

          .wrapper {
            @include container();
          }

  :markdown
    For more about wrappers, see the example on fixed, fluid, and fixed fluid
    layouts in [Layout and CSS](/docs/#{docsVersion}/ui/)

    The **row** is a container for column elements.

    The **column** is a measured container that occupies up to 12 column widths.

  h2#use-shortcuts Use Shortcuts

  :markdown

    Columns can be expressed by a number or one of three English words

  .if-semantic
    :markdown
      These are passed into the `column()` mixin.

          @include column('third');
          @include column('twothirds');
          @include column('half');

  .ifnot-semantic
    :markdown
      Each are added to the end of the `.col-` class.

          .col-third
          .col-twothirds
          .col-half

  :markdown

    These are not just for convenience, they automatically set breakpoints to
    change column widths on various screen sizes.

  h2#use-numbers Use numbers

  :markdown

    Passing in numbers, choose a column width from 1-12:

  .if-semantic
    :markdown
      <span>

          .newsfeed {
            @include column(2);
          }
          .article {
            @include column(10);
          }

  .ifnot-semantic
    :markdown
      <span>

          <div class="newsfeed col-2">
            ...
          </div>
          <div class="article col-10">
            ...
          </div>

block variations
  h2 More examples
  .example
    .row
      .col-3: .col-example 3 columns
      .col-3: .col-example 3 columns
      .col-3: .col-example 3 columns
      .col-3: .col-example 3 columns

    .row
      .col-3: .col-example 3 columns
      .col-6: .col-example 6 columns
      .col-3: .col-example 3 columns

    .row
      .col-6: .col-example 6 columns
      .col-6: .col-example 6 columns

    .row
      .col-3: .col-example 3 columns
      .col-9: .col-example 9 columns

    .row
      .col-3: .col-example 3 columns
      .col-3.col-pull-6: .col-example 3 columns, 6 column pull

    .row
      .col-6.col-push-6: .col-example 6 columns, 6 column push

    .row
      .col-6: .col-example 6 columns

    .row
      .col-9.col-pull-3: .col-example 9 columns, 3 column pull

    .row
      .col-4: .col-example 4 columns
      .col-4: .col-example 4 columns
      .col-4: .col-example 4 columns

    .row
      .col-4.col-pull-4.col-push-4: .col-example 4 columns, 4 column pull, 4 column push

    .row
      .col-4.col-push-4: .col-example 4 columns, 4 column push

    .row
      .col-4.col-pull-4: .col-example 4 columns, 4 column pull

    .row
      .col-6: .col-example 6 columns
      .col-6: .col-example 6 columns
      .col-6: .col-example 6 columns
      .col-6: .col-example 6 columns

    .row
      .col-12: .col-example 12 columns

  h2 Pulls

  .example
    .row
      .col-pull-6.col-6: .col-example six columns with six column pull

  .ifnot-semantic
    :markdown
      <span>

          ...
          <div class="col-pull-6 col-6">
            Six columns
          </div>

  .if-semantic
    :markdown
      <span>

          ...
          <div class="reminder">
            Six columns
          </div>

          .reminder {
            @include column(6, 6);
          }

  .example
    .row
      .col-pull-2.col-10: .col-example 10 columns with 2 column pull
    .row
      .col-3: .col-example 3 columns
      .col-6: .col-example.col-pull-3 6 columns with 3 column pull
    .row
      .col-pull-4.col-4: .col-example 4 columns with 4 column pull

  :markdown
    ### Pushes

    An interesting thing happens when using CSS flexbox for a grid: When the
    columns don't add up to 12, they space themselves out (thanks to the `space-between`
    property).

    Look at the difference between these two grids:

  .example
    .row
      .col-3: .col-example 3 columns
      .col-6.col-pull-3: .col-example 6 columns with 3 column pull
      .col-3: .col-example 3 columns
      .col-6: .col-example 6 columns

  :markdown
    They look so similar, you might say the 3 column pull isn't necessary in the first.

    A pull would be necessary, however, if we didn't want the last column to
    automatically go the very right. Maybe we just want 1 column of space
    between the two.

  .example
    .row
      .col-3: .col-example 3 columns
      .col-6.col-pull-1: .col-example 6 columns with 1 column pull

  :markdown
    As you can see, it still looks the same. This is for the same reason. The
    columns aren't adding up to 12, so they automatically create the necessary
    space between themselves to fill the 12 column grid. Let's see what happens
    if we add a another two column.

  .example
    .row
      .col-3: .col-example 3 columns
      .col-6.col-pull-1: .col-example 6 columns with 1 column pull
      .col-2: .col-example 2 columns

  :markdown
    But what if we wanted the columns to feed in from left to right, without the
    automatic spacing in between (with the exception of the gutters)?

    This is where push is handy. Just as we can pull the columns to the right, we
    can also push the columns to the left.

  .example
    .row
      .col-3: .col-example 3 columns
      .col-6.col-push-3: .col-example 6 columns with 3 column push
      .col-3: .col-example 3 columns
      .col-6: .col-example 6 columns

  :markdown
    Because we already have a total of 9 columns used up, we need to
    finish (push) the remaining three to complete 12 columns.

  .ifnot-semantic
    :markdown
      <span>

          ...
          <div class="col-3">
            Three columns
          </div>
          <div class="col-6 col-push-3">
            Six columns
          </div>

  .if-semantic
    :markdown
      <span>

          ...
          <div class="news">
            Three columns
          </div>
          <div class="events">
            Six columns
          </div>

          .news {
            @include column(3); // 3 columns
          }
          .events {
            @include column(6, 0, 3); // 6 columns, 0 pull, 3 push
            @include column($columns: 6, $push: 3) // Alternative way of writing the above.
          }

  h3 Shortcuts
  p Pulls can also use semantic shortcuts.

  .ifnot-semantic
    :markdown
      <span>

          <div class="col-third col-pull-twothirds">
            ...
          </div>

  .if-semantic
    :markdown
      <span>

          <div class="blurb">
            ...
          </div>

          .blurb {
            @include column('third, twothirds');
          }

  p In the above example, the column and the pull will revert to 1/2 width on tablet. On mobile, the pull will disappear and the column will be full-width.

  h2 Nesting

  .example
    .row
      .col-6
        .col-example
          | half
          .row
            .col-6: .col-example.gray half
            .col-6: .col-example.gray half
      .col-6
        .col-example
          | half
          .row
            .col-4: .col-example.gray third
            .col-4: .col-example.gray third
            .col-4: .col-example.gray third

  p When nesting, be sure to include a new row in the parent column.

  .if-semantic
    :markdown
      <span>

          <div class="row">
            <div class="sidebar">
              half
              <div class="options">
                <div class="terms">
                  half
                </div>
                <div class="definitions">
                  half
                </div>
              </div>
            </div>
            <div class="main">
              <div class="menu">
                <div class="new">third</div>
                <div class="updated">third</div>
                <div class="archived">third</div>
              </div>
            </div>
          </div>

          .row, .menu, .options {
            @import row();
          }
          .sidebar, .main, .terms, .definitions {
            @import column(6);
          }
          .new, .updated, .archived {
            @import column(4);
          }

  .ifnot-semantic
    :markdown
      <span>

          <div class="row">
            <div class="col-6">
              half
              <div class="row">
                <div class="col-6">
                  half
                </div>
                <div class="col-6">
                  half
                </div>
              </div>
            </div>
            <div class="col-6">
              <div class="row">
                <div class="col-4">third</div>
                <div class="col-4">third</div>
                <div class="col-4">third</div>
              </div>
            </div>
          </div>


  h2#responsive Responsive

  .ifnot-semantic
    :markdown
      Setting column rules via classes requires just a bit more syntax.

      It is best practice to set the styles you expect on your smallest device
      first. This is what is known as designing "[Mobile First](http://bradfrostweb.com/blog/mobile/the-many-faces-of-mobile-first/)"

      For this, we'll use a regular grid class.

          <div class="row">
            <section class="col-12">
              <h1>About me</h1>
              <p>...</p>
            </section>
            <section class="col-12">
              <h1>My work</h1>
              <p>...</p>
            </section>
            <section class="col-12">
              <h1>Get in touch</h1>
              <p>...</p>
            </section>
          </div>

      In this example, we want these three sections to stack on top of one
      another. However, on tablet, it would be nice to have the first two in two
      columns. We can use the following syntax to create a mobile rule:

          .col-[size]-[columns]

      `size` is the viewport size and `columns` is a number 1-12.

      Here are the sizes available with their corresponding widths:

    table
      thead
        tr
          th Size name
          th Actual width
      tbody
        - for breakpoint in [{name: 'xs', size: '360px'}, {name: 'sm', size: '480px'}, {name: 'rg', size: '768px'}, {name: 'md', size: '1024px'}, {name: 'lg', size: '1200px'}, {name: 'xl', size: '1400px' }]
          tr
            td
              code #{breakpoint.name}
            td #{breakpoint.size}

    :markdown
      Now let's add a rule.

          <div class="row">
            <section class="col-12 col-md-6">
              <h1>About me</h1>
              <p>...</p>
            </section>
            <section class="col-12 col-md-6">
              <h1>My work</h1>
              <p>...</p>
            </section>
            <section class="col-12">
              <h1>Get in touch</h1>
              <p>...</p>
            </section>
          </div>

      As you can see, we did not need to add a class to the last `section` because
      we want that to stay full width, at least for this breakpoint.

      On desktop, we have enough room to split these up a little more. Let's make
      each one of them a third of the total width.

          <div class="row">
            <section class="col-12 col-md-6 col-lg-4">
              <h1>About me</h1>
              <p>...</p>
            </section>
            <section class="col-12 col-md-6 col-lg-4">
              <h1>My work</h1>
              <p>...</p>
            </section>
            <section class="col-12 col-lg-4">
              <h1>Get in touch</h1>
              <p>...</p>
            </section>
          </div>

    h3#pulls

    :markdown
      For mobile pulls, we use the form:

          .col-pull-[size]-[columns]

      If we wanted our "Get in touch" section above to half-sized and pull by
      half on a medium-sized display, we could add this:

          <section class="col-12 col-md-6 col-pull-md-6 col-lg-4">
            <h1>Get in touch</h1>
            <p>...</p>
          </section>

      The pull will automatically remove itself if a `col-lg` column definition
      is declared.

  .if-semantic
    :markdown
      Mix your grid rules into media queries to make your own responsive rules.

      It helps to use the breakpoints provided. Each returns a fixed width based
      on a common device.

    table
      thead
        tr
          th Variable
          th Actual width
      tbody
        - for breakpoint in [{name: '$phone', size: '360px'}, {name: '$phablet', size: '480px'}, {name: '$tablet', size: '768px'}, {name: '$tablet-landscape', size: '1024px'}, {name: '$large-monitor', size: '1200px'}, {name: '$xl-monitor', size: '1400px' }]
          tr
            td
              code #{breakpoint.name}
            td #{breakpoint.size}

    :markdown

      When using media queries, it's best practice to write your styles for the
      smallest device first, and write the exceptions as you go up. This is
      commonly referred to as
      [Mobile First](http://bradfrostweb.com/blog/mobile/the-many-faces-of-mobile-first/)
      design.

      Here's how we might make some different column rules using
      these breakpoints:

          <div class="about-me">
            ...
          </div>
          <div class="my-work">
            ...
          </div>
          <div class="getting-in-touch">
            ...
          </div>

      We want each of the above sections to occupy a third of the page on
      desktop.

      Oh wait, we're designing this mobile first. Let's start with the phone.
      Three columns would be a little crowded, so let's just stack one on top of
      the other.

          .about-me, .my-work, .getting-in-touch {
            @include column(12);
          }

      This looks good, but on a tablet in landscape position, the reading stride
      is a little wide. Let's split up the first two columns and leave the last
      one full.

          .about-me, .my-work, .getting-in-touch {
            @include column(12);
          }
          @media screen and (min-width: $tablet-landscape) {
            .about-me, .my-work {
              @include column(6);
            }
          }

      Notice, we don't have to write anything for `.getting-in-touch` because
      we inherit its full-width from the phone's rule.

      Now we're on desktop and we're ready to go into three column mode.

          .about-me, .my-work, .getting-in-touch {
            @include column(12);
          }
          @media screen and (min-width: $tablet-landscape) {
            .about-me, .my-work {
              @include column(6);
            }
          }
          @media screen and (min-width: $desktop) {
            .about-me, .my-work, .getting-in-touch {
              @include column(4);
            }
          }

      That should be all we need for a responsive grid.
