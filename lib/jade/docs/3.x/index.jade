extends _layout

block hero-title
  h1 Quickstart

block variables
  - var showFooter = false 

block documents
  .document 
    article.article.article-full
      :markdown
        Choose how you'd like to get started

        ### [Barebones](#barebones)

        Just use the CSS/JS file.

        ### [Rails](#framework)

        Use in a **Rails 4+** project.

        ### [Gulp](#gulp)

        Use our Gulp-powered compilation boilerplate

        ### [Node.js](#node)

        Add Kickstart as an npm package

  .document
    article.article
      header#barebones.page-heading
        h3 Barebones

      :markdown
        Use the CDN

    article.code
      :markdown
        <span>

            <link rel="stylesheet" href="//cdn.getkickstart.com/css/kickstart.min.css" />
            <script type="text/javascript" src="//cdn.getkickstart.com/js/kickstart.min.js"></script>

  p Or download kickstart.css and kickstart.js and include in your html file.

  p
    a.button.primary(href="http://cdn.getkickstart.com/css/kickstart.min.css")
      span.fa.fa-cloud-download
      |  kickstart.css
    | &nbsp;
    a.button.primary(href="http://cdn.getkickstart.com/js/kickstart.min.js")
      span.fa.fa-cloud-download
      |  kickstart.js

  :markdown
    <span>

        <!DOCTYPE HTML>
        <html>
          <head>
            <link rel="stylesheet" href="css/kickstart.css" />
          </head>
          <body>
            ...
            <script src="js/kickstart.js"></script>
          </body>
        </html>

    Make sure any JavaScript code that uses `k$` goes after the script tag
    inclusion of kickstart.js.

    Notice that using this method will obviously not allow for using the
    semantic version of the docs.

  header#framework.page-heading
    h3 Rails

  :markdown
    Install the [Kickstart gem](https://rubygems.org/gems/kickstart_rails)

        gem install "kickstart_rails"

    Rails integration is Sass-only. This means you will
    need to use the mixins instead of things like `.col-6`.

    Some of this is practical, some is philosophical, but if you really need the
    regular css despite the fact you're running a full sass-compilation
    environment, linking to kickstart.css directly is still an option.

    You can either import kickstart into application.css or into individual
    files.

    #### Import in application.css

    application.css must first be converted into .scss/.sass and not use any
    `/* require` statements. This is because sprockets does not see the sass
    variables. It will merely concatenate the compiled files together. 

    You can change this to use `@import ` statements with an import to
    `kickstart_rails` at the top.

        @import kickstart_rails;
        @import mysassfile1.sass;
        @import mysassfile2.sass;

    #### Import in separate files

    To use in separate files, simply add

        @import kickstart_rails;

    to the top of the file. Remember that this will also bring in some
    non-mixin styles, such as the typography, which would be made hard
    to override. For this reason, we recommend converting your
    application.css file instead. (above)

    #### JavaScript

    Fortunately, adding the JavaScript is easier. Just add

        //= require kickstart_rails
    
    to the top of application.js

    #### Autoprefixing

    The gem uses autoprefixer to automatically prefix styles. If you want to
    specify your own autoprefixing rule, you'll just need to add a .yml file

    See the instructions 
    [at the Autoprefixer docs](https://github.com/ai/autoprefixer-rails)

    #### Theming

    To add a theme using the Rails implementation, see [Theming](/docs/3.x/theming#rails)

  header#gulp.page-heading
    h3 Gulp

  :markdown
    My tool of choice for building all of Kickstart is gulp, plus a ton of
    extras. The easiest way to get started with a gulp implementation of
    kickstart is to simply
    [clone the repo](https://github.com/ajkochanowicz/Kickstrap).

    Setup instructions are in the README.md file at the repo.

    Once you have your environment up and running, you should empty the jade
    folder and use kickstart-semantic.sass. This was designed specifically as an
    empty file with everything imported in.

    Rename it to whatever you like and link to the resulting .css file in your
    html/jade

  header#node.page-heading
    h3 Node.js

  :markdown
    Kickstart can easily be added as an npm package with

        npm install --save-dev kickstart-node

    This will download the entire repo to a `node_modules` folder.

    In your sass or scss file, import Kickstart via the theme you prefer: 

        @import node_modules/kickstart-node/lib/sass/themes/_default

    Notice you may need a couple `../`s before `node_modules` to point
    to the node_modules directory. This all depends on how you organized your
    project.

    In the above example, node_modules is at the same level as the scss/sass
    file.

    #### Autoprefixer

    The chances are very good that you'll need to include [autoprefixer](https://github.com/postcss/autoprefixer).
    This will add prefixes like `-webkit-` to bleeding edge css properties. Make sure
    this is included as part of your CSS compilation workflow.

    [Also available for Gulp](https://www.npmjs.org/package/gulp-autoprefixer)


