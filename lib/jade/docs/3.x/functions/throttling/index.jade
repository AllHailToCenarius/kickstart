extends ../../layout

block hero-title
  h1 Throttling

block basic
  :markdown
    ## Buffer

    The buffer accepts a function. Each function it is given is run, but
    at a specific rate.


        k$.buffer(function() {
          console.log('hello world');
        })

    An example of this is the [growl component](/docs/3.x/ui/notifications/), which buffers the creation
    of growls to once every half second.

    This ensures the user is not bombarded by too many messages at once.

  iframe.animation(scrolling="no" src="/iframes/buffer/buffer.html")

  :markdown
    The buffer can also take a custom delay between firing functions

        k$.buffer(function() {
          console.log('hello world');
        }, 1000);

    Notice the delay only applies when the buffer has started. This will
    not adjust the delays for a buffer that is currently being run.

  div(style="display: none")
    :markdown
      ## Throttling

      Throttling is a function used by a few components in the library,
      so we've made it available as a standalone function.

          k$.throttle(myfunc, 'save name')

      Throttling allows a single function to be called only once every
      X milliseconds.

    iframe.animation(scrolling="no" src="/iframes/throttler/throttler.html")

  :markdown
    ## Debouncing

    You can also debounce a component with `k$.debounce()`

        k$.debounce(myfunc, 'save name')

    A debouncer prevents a single function from being executed until
    X milliseconds have elapsed since it was last sent through the
    debouncer.

  iframe.animation(scrolling="no" src="/iframes/debouncer/debouncer.html")

  :markdown
    An example usage of the debouncer is 
    [the status component](../../ui/notifications), which delays 
    hiding itself until the function hasn't been called for 2000ms
