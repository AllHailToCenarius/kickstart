extends ../_layout

block hero-title
  h1 Adding Extensions

block variables
  - var showFooter = false
  - var title = "Adding Extensions"

block documents
  .document
    article.article.article-full
      :markdown 
        # Submodules

        Kickstart extensions are [Git Submodules](http://git-scm.com/book/en/Git-Tools-Submodules).
        Git Submodules are a neat way of including other git repositories in your own. You can keep
        them up-to-date with the main repo while not committing the entire contents of the repo with
        your project.

        It's best to show how this works first, as there are some variations based on your environment 
        and type of extension you'd like to install.

      p
        span.notice Rails users
        |  Using third-party components/themes is optional, but you'll need to add the Rails shim to do
        | so. See "Shimming rails" below before doing anything else.

  .document
    article.article
      :markdown
        ## Adding submodules

        All submodules should be installed *at the same level as core/*

        On the [Kickstart Store](http://kickstart-store.com), each extension has a submodule creation
        command that should look something like the code you see here.

        Running this in the terminal will create a folder (in this case "switch") and will download the
        contents of the repo much like `git clone`.

    article.code
      :markdown
        <span>

            $ git submodule add git://github.com/ajkochanowicz/switch.git

  .document
    article.article
      :markdown
        If we cd into this folder, it acts just like a regular git repo. You can pull from the source
        and even push if you have permission.

        All this directory changing and pulling can get hairy when using multiple submodules. Don't
        worry, there is a better way. Keep reading.

    article.code
      :markdown
        <span>

            $(~) cd switch
            $(switch) git status

            On branch master
            Your branch is up-to-date with 'origin/master'.

            nothing to commit, working directory clean

  .document
    article.article
      :markdown
        ## Updating submodules

        There are a few ways to update your submodules, depending on what you want to do.
        If you are cloning your project on another machine, you should refer to the documentation
        on cloning below.

        To run a git pull for each submodule, you can use the `foreach` operator.

        The second example achieves the same thing, but is wrapped up in your project's
        regular git pull.

        The last command actually checks out the commits you just pulled down.

    article.code
      :markdown
        <span>

            # Do one of these:
            $(~) git submodule foreach git pull origin master 
            $(~) git pull origin master --recurse-submodules

            Submodule path 'switch': checked out 'e9a72c2fddd41a0a4e25089790e3907582feb538'
            Submodule path 'foo': checked out 'sd92j0vaskdjfjsdkfjna290304ud8sjf202ksdk'
            Submodule path 'bar': checked out '293js0qjlkdsfj02jasdfkj20s9ij2ji2kjdlskj'
            Submodule path 'toaster': checked out 'sdij29j20jdjfsldjkkkbbzxv982893jh034jjk'

            # Then do this:
            $(~) git submodule update --recursive

  .document
    article.article
      :markdown
        ## Cloning your project

        When pulling down your project for the first time on a machine, the instructions for submodules
        are actually not the same as updating.  

        After cloning your project, you'll need to run the last two commands shown

        [Official documentation](http://git-scm.com/book/en/Git-Tools-Submodules#Cloning-a-Project-with-Submodules)

    article.code
      :markdown
        <span>

            $(~) git clone git@github.com:user/myrepo.git 
            ...
            $(~) cd myrepo
            $(myrepo) git submodule init
            $(myrepo) git submodule update

  .document
    article.article.article-full
      :markdown
        # Add a component

      p
        span.notice Use the right directory
        | From here on, these directions will assume you are working at the directory where
        | <code>core/<code> is located. In Node.js, this should be <code>lib/sass/</code>.

      :markdown
        In Rails, this should be the parent directory of your Rails shim (see Shimming below.)
        Most likely, this is `app/assets/stylesheets/`

  .document
    article.article
      :markdown 
        If you're using a clone of the repo, submodule the theme into `vendor`
        This will automatically create a folder with the name of the repository.

    article.code
      :markdown
        <span>
        
            $(~) cd vendor

            $(vendor) git submodule add git://github.com/ajkochanowicz/switch.git

  .document
    article.article
      :markdown
        Now let's add this to `vendor/_index.sass` so your theme automatically
        picks it up.

        Notice here we have switch written twice (`switch/switch`) This is because we're
        importing the `switch.sass` file in the `switch` directory. The `.sass` on the last
        instance of `switch` can be omitted.

        For the component you're using, pay close attention to the actual sass file you need
        to import.

        **Skip to "Add a component (continued)"**

    article.code
      :markdown
        <span>

            @import switch/switch

  .document
    article.article.article-full
      :markdown
        ## In Rails

        Adding a third-party component in Rails will require access to your theme file.
        If you're using the default theme, this will not be easily available for editing in
        your project. For this reason, it is recommended to add a theme first
        (you can still use the default theme from the [Kickstart Store](http://kickstart-store.com))

        Return to this section after you have done this.

  .document
    article.article
      :markdown
         Add your chosen component as a submodule in `app/assets/stylesheets`. It will automatically
         create a directory for your theme.  

    article.code
      :markdown
        <span>

            $(stylesheets) git submodule add git://github.com/ajkochanowicz/switch.git 

  .document
    article.article
      :markdown
        `@import` the component's sass/scss file in application.css.sass

        Note that the first `switch` here refers to the directory. the second refers to the .sass file
        inside of it.

    article.code
      :markdown
        <span>

            @import switch/switch

  .document
    article.article
      :markdown
        You now have the component's core mixin available. At this point, you can extend it in
        your theme file (shown in the next section) or just use the core mixin in one of the classes
        (shown here).

    article.code
      :markdown
        <span>

            .switch
              +switch-default 

  .document
    article.article
      :markdown
        ## Add a component (continued)

        At this point, you should have the component available, but we need to extend it in our theme.

        Open your theme and add a mixin that extends the component. For switch, we would do this (see code)

        We add the `$color` parameter only because that's one of the params in the actual mixin. If the
        author writes good documentation on their component, this information should be available on the 
        component detail page. Otherwise, you may need to dig into the sass file itself to understand how
        to integrate it.

    article.code
      :markdown
        <span>

            =switch($color: $primary-color)
              +switch-default($color) 


  .document
    article.article
      :markdown
        We now have a fully-functioning mixin that we can even extend inside our theme file. However, it's
        not yet available to CSS. Let's `@include` it in a class.

    article.code
      :markdown
        <span>

            .switch
              +switch

  .document
    article.article.article-full
      :markdown
        That should be all we need to make the CSS available for us from the component. Further documentation
        on markup needed and extras will depend on the component being used.

  .document
    article.article.article-full
      :markdown
        # Add a theme

        ## In Rails

        See [Theming](/docs/#{docsVersion}/theming/#in-rails)

  .document
    article.article
      :markdown 
        ## In Node/Gulp

        Submodule your theme (See "Adding a submodule at the top") into the `lib/sass/themes` directory.  

    article.code
      :markdown
        <span>

            $(themes) git submodule add git://github.com/ajkochanowicz/mynewtheme.git 

  .document
    article.article
      :markdown
        Now you'll need to change the theme from `_default` to whatever theme you chose.

        Depending on your implementation, you'll probably find this `@import` in your main
        sass file.

        Here is an example from kickstart-semantic.sass

    article.code
      :markdown
        <span>

            //  Kickstart Semantic
            //  ==================
            //  This is just a starter file for using Kickstrap via Sass
            //  Rename this file to something you like (e.g. style.sass) and import it by
            //  the same .css name from your html/jade file.

            // Choose your theme
            @import themes/mynewtheme/theme.sass

            // Now write your own Sass 

  .document
    article.article
      :markdown
        # Shimming for rails

        ## Add the shim

        If you are using the kickstart_rails gem and wish to take advantage of the Kickstart store, 
        you'll just need to do some shimming first so Sass `@import` directories continue to work.

        For convenience, we've provided this shim in the store. Find this shim and install it as a 
        submodule in app/assets/stylesheets

    article.code
      :markdown
        <span>

            $(~) cd app/assets/stylesheets 
            $(stylesheets) git submodule add git://github.com/ajkochanowicz/core.git

  .document
    article.article.article-full
      :markdown
        You should now have a directory called "core" in your stylesheets. The files in this directory
        simply reroute `@imports` to your kickstart_rails gem. There is no duplication of code here.

        This also means you won't need to update this shim when you update kickstart, unless otherwise
        noted.

  .document
    article.article
      :markdown
        ## Prepare for 3rd party components
        
        Make two other directories in stylesheets, `themes` and `vendor`. These will be the two directories
        you will use for components and themes.

        In vendor, create a sass file called `_index.sass`. This does not have to contain any content.

        That's it, you're now ready to use 3rd party components. Follow the same instructions on adding
        components or themes as a node.js user.

    article.code
      :markdown
        <span>

            $(stylesheets) mkdir themes vendor
            $(stylesheets) touch vendor/_index.sass
