extends ../_layout

block hero-title
  h1 Adding Extensions

block variables
  - var showFooter = false
  - var title = "Adding Extensions"

block documents
  .document
    article.article.article-full
      :markdown
        # Add an extension to your project

        Kickstart extensions are [Git Submodules](http://git-scm.com/book/en/Git-Tools-Submodules).
        Git Submodules are a neat way of including other git repositories in your own. You can keep
        them up-to-date with the main repo while not committing the entire contents of the repo with
        your project.

        It's best to show how this works first, as there are some variations based on your environment 
        and type of extension you'd like to install.

  .document
    article.article
      :markdown
        ## Adding a submodule

        On the [Kickstart Store](http://kickstart-store.com), each extension has a submodule creation
        command that should look something like this.

        Running this in the terminal will create a folder (in this case "switch")

    article.code
      :markdown
        <span>

            $ git submodule add git://github.com/ajkochanowicz/switch.git

  .document
    article.article
      :markdown
        If we cd into this folder, it acts just like a regular git repo. You can pull from the source
        and even push if you have permission.

    article.code
      :markdown
        <span>

            $(~) cd switch
            $(switch) git status

            On branch master
            Your branch is up-to-date with 'origin/master'.

            nothing to commit, working directory clean

  .document
    article.article
      :markdown
        ## Updating submodules

        Managing multiple submodules is very easy. Besides controlling each as an individual repo, we can
        also run this update commmand to sync our entire directory of 3rd part components.

        No longer do you have to wait for major updates to the core CSS framework. Updates come in as 
        the community produces them.

    article.code
      :markdown
        <span>

            $(~) git submodule update --recursive

            Submodule path 'switch': checked out 'e9a72c2fddd41a0a4e25089790e3907582feb538'
            Submodule path 'foo': checked out 'sd92j0vaskdjfjsdkfjna290304ud8sjf202ksdk'
            Submodule path 'bar': checked out '293js0qjlkdsfj02jasdfkj20s9ij2ji2kjdlskj'
            Submodule path 'toaster': checked out 'sdij29j20jdjfsldjkkkbbzxv982893jh034jjk'

  .document
    article.article
      :markdown
        # Add a component

        ## In Gulp/Node.js

        If you're using a clone of the repo, submodule the theme into `lib/sass/vendor`
        This will automatically create a folder with the name of the repository.

    article.code
      :markdown
        <span>
        
            $(~) cd lib/sass/vendor

            $(vendor) git submodule add git://github.com/ajkochanowicz/switch.git

  .document
    article.article
      :markdown
        Now let's add this to `lib/sass/vendor/_index.sass` so your theme automatically
        picks it up.

        Notice here we have switch written twice (`switch/switch`) This is because we're
        importing the `switch.sass` file in the `switch` directory. The `.sass` on the last
        instance of `switch` can be omitted.

        For the component you're using, pay close attention to the actual sass file you need
        to import.

        **Skip to "Add a component (continued)"**

    article.code
      :markdown
        <span>

            @import switch/switch

  .document
    article.article.article-full
      :markdown
        ## In Rails

        Adding a third-party component in Rails will require access to your theme file.
        If you're using the default theme, this will not be easily available for editing in
        your project. For this reason, it is recommended to add a theme first
        (you can still use the default theme from the [Kickstart Store](http://kickstart-store.com))

        Return to this section after you have done this.

  .document
    article.article
      :markdown
         Add your chosen component as a submodule in `app/assets/stylesheets`. It will automatically
         create a directory for your theme.  

    article.code
      :markdown
        <span>

            $(stylesheets) git submodule add git://github.com/ajkochanowicz/switch.git 

  .document
    article.article
      :markdown
        `@import` the component's sass/scss file in application.css.sass

        Note that the first `switch` here refers to the directory. the second refers to the .sass file
        inside of it.

    article.code
      :markdown
        <span>

            @import switch/switch

  .document
    article.article
      :markdown
        You now have the component's core mixin available. At this point, you can extend it in
        your theme file (shown in the next section) or just use the core mixin in one of the classes
        (shown here).

    article.code
      :markdown
        <span>

            .switch
              +switch-default 

  .document
    article.article
      :markdown
        ## Add a component (continued)

        At this point, you should have the component available, but we need to extend it in our theme.

        Open your theme and add a mixin that extends the component. For switch, we would do this (see code)

        We add the `$color` parameter only because that's one of the params in the actual mixin. If the
        author writes good documentation on their component, this information should be available on the 
        component detail page. Otherwise, you may need to dig into the sass file itself to understand how
        to integrate it.

    article.code
      :markdown
        <span>

            =switch($color: $primary-color)
              +switch-default($color) 


  .document
    article.article
      :markdown
        We now have a fully-functioning mixin that we can even extend inside our theme file. However, it's
        not yet available to CSS. Let's `@include` it in a class.

    article.code
      :markdown
        <span>

            .switch
              +switch

  .document
    article.article.article-full
      :markdown
        That should be all we need to make the CSS available for us from the component. Further documentation
        on markup needed and extras will depend on the component being used.

  .document
    article.article.article-full
      :markdown
        # Add a theme

        ## In Rails

        See [Theming](/docs/#{docsVersion}/theming/#in-rails)

  .document
    article.article
      :markdown 
        ## In Node/Gulp

        Submodule your theme (See "Adding a submodule at the top") into the `lib/sass/themes` directory.  

    article.code
      :markdown
        <span>

            $(themes) git submodule add git://github.com/ajkochanowicz/mynewtheme.git 

  .document
    article.article
      :markdown
        Now you'll need to change the theme from `_default` to whatever theme you chose.

        Depending on your implementation, you'll probably find this `@import` in your main
        sass file.

        Here is an example from kickstart-semantic.sass

    article.code
      :markdown
        <span>

            //  Kickstart Semantic
            //  ==================
            //  This is just a starter file for using Kickstrap via Sass
            //  Rename this file to something you like (e.g. style.sass) and import it by
            //  the same .css name from your html/jade file.

            // Choose your theme
            @import themes/mynewtheme/theme.sass

            // Now write your own Sass


