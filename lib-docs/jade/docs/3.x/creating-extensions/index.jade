extends ../_layout

block hero-title
  h1 Adding Extensions

block variables
  - var showFooter = false
  - var title = "Creating Extensions"

block subMenuVars
  - var subMenuItem = "getstarted"

block documents
  .document
    article.article
      :markdown 
        # How to create an extension

        An extension is simply a Git repository that a user clones into their
        project. The repository should contain code that builds on core code
        to expose new functionality.

        Because the user's project will already be a git repository. They'll
        install your git repo as a Git submodule. A Git submodule is simply
        a repo in a repo.

        As Kickstart is maintained primarily as a Gulp project, this guide will
        show you how to make extensions by cloning Kickstart itself.

        Because of there is some overlap, this guide documents how to create both 
        a component and a theme.

    article.code
      :markdown
        <span>

            # Here's how the user will install your extension
            $ git submodule add git://github.com/yournamehere/myextension.git

  .document
    article.article
      :markdown
        ## Create a project to contain your extensions

        For your first extension, you're going to create two repositories. The
          first will be a project to contain all the extensions you build from now on.
          this is what we'll mean when we say "project" from here on.

        The second will be the extension itself. This is a highly recommended workflow
          for extension development.

        First, clone the Kickstart repo.

    article.code
      :markdown
        <span>

            # Create a "My Extensions" directory and cd into it.
            $(~) git clone git@github.com:ajkochanowicz/kickstart.git myextensions --depth 1 && cd myextensions

  .document
    article.article
      :markdown
        Now you'll need to install all the necessary Kickstart dependencies with the following commands.

    article.code
      :markdown
        <span>

            $(myextensions) sudo npm install -g gulp && npm install . && bundle && make

  .document
    article.article
      :markdown
        If everything worked correctly, you should be able to launch the project with the  `gulp` 
          command. This will automatically launch a browser with a basic sample webpage.

        If you'd like to save your project environment on github, you can remove the existing
          `origin` remote from `.git/config` and add your own (Using the instructions provided 
          on Github after creating a new repo is a great way to do this.)

    article.code
      :markdown
        <span>

            $(myextensions) gulp

  .document
    article.article
      :markdown
        ## Create your first extension

        You can now use the following steps for your first and every new extension you wish to create.

        ### Components

        For **components**, take a look in the `lib/sass/vendor` directory. This is where you'll create your first
        extension. You should see there is already an extension there called "switch."

        You're welcome to simply copy and rename this extension if you need inspiration. Otherwise,
        this guide will show you how to create a new one from scratch.

    article.code
      :markdown
        <span>

            $(myextensions) cd lib/sass/vendor && ls -l
            total 8
            -rw-r--r--  _index.sass
            drwxr-xr-x  switch

  .document
    article.article.article-full
      :markdown
        Let's create an extension with the name "status-text"

        Because submodules are inherently remote repositories, we need to actually create
        repository in GitHub first.

        Create a new repo in GitHub and initiate with a README.md file. In this example,
        we'll say we created a repo called "status-text"

  .document
    article.article
      :markdown
        Now that you have your `status-text` repo, you'll need to add it as a submodule
        in your project.

        <span class="notice">Don't clone!</span> It's tempting to just `git clone` your repo, here,
        but you won't be able to maintain it as easily from within your project.

        You should then see this directory created alongside the `switch` extension.

    article.code
      :markdown
        <span>

            $(vendor) git submodule add git@github.com:mygithubaccount/status-text.git

            $(vendor) ls
            switch status-text _index.sass

  .document
    article.article
      :markdown
        Before we `cd` into your new extension, let's add your extension as a vendor
        asset for your project.

        Edit `lib/sass/vendor/_index.sass` as such:

    article.code
      :markdown
        <span>

            // Vendor libraries
            // ================
            // 3rd party additions to the Kickstart UI library should
            // be indexed here.

            // e.g. @import datepicker
            @import switch/switch
            @import status-text/index.sass

            body
              display: inherit

  .document
    article.article
      :markdown
        Now we just need to add that "index.sass" in status-text.

        `cd` into status-text and create it. For now, it doesn't 
        need to create anything. It just needs to exist.

    article.code
      :markdown
        <span>

            $(vendor) cd status-text && touch index.sass

  .document
    article.article.article-full
      :markdown
        #### Start coding

        You're now fully setup to write the code for your extension.
        Anything you write to `status-text/index.sass` will be availble
        to your end user.

        Let's write some code in index.sass to get started.

  .document
    article.article
      :markdown
        In this example, status-text will be a sass mixin that
        uses the colors defined in the user's Kickstart theme and applies them
        to text.

        We'll let them use the keywords "good," "okay," and "bad" to denote
        the status.

        Let's create the mixin that does that.

    article.code
      :markdown
        <span>

            // In status-text/index.sass

            =status-text($type: 'good')
              @if $type == 'good'
                color: map-get($colors, green)

              @if $type == 'okay'
                color: map-get($colors, yellow)

              @if $type == 'bad'
                color: map-get($colors, red)

  .document
    article.article
      :markdown
        At this point, the end user can easily just use your
        extension in their project as such:

        Of course, this is too simple an extension to be useful, but
        with the entire core of Kickstart at your disposal, you can
        build it out to do much more.

    article.code
      :markdown
        <span>

            // In lib/sass/style.sass
            
            @import themes/default/theme

            // Write your styles here.

            p.stable
              +status-text('good')

            p.error
              +status-text('bad')

            p.warning
              +status-text('okay')

  .document
    article.article
      :markdown
        ### Themes

        For **themes**, look in `lib/sass/themes/`. There you'll see a directory called "default"
          and a sass file called theme.sass.

        If you look at theme.sass, you'll notice the content is unremarkable. To reduce
          code duplication, we've just routed it to the default theme from kickstart-core.

        To create your theme, you'll want to have a directory with your theme's name
        next to the "default" directory. In that directory you'll also want a `theme.sass`
        file.

        But to do this, we should really start out with the default theme and evolve it into
        something new. Let's copy the default theme from the core and add it to your theme
        directory in lib.

    article.code
      :markdown
        <span>

            # In this example, our theme will be called "Dark"
            $(myextensions) mkdir lib/sass/themes/dark

            # Copy the core theme into "dark"
            $(myextensions) cp lib-core/sass/themes/default/theme.sass lib/sass/themes/dark/

  .document
    article.article
      :markdown
        At this point, it may be helpful to read about the [anatomy of a theme](/docs/#{docsVersion}/theming/#anatomy-of-a-theme)
        to understand how a theme works in Kickstart.

        If you understand that, getting started writing your own theme should be
          straightforward.

        Before you start, however, you should probably change your project theme
        to the new one you're now creating. Open `lib/style.sass` and change the `@import`
        to point to your new theme.

    article.code
      :markdown
        <span>

            // lib/sass/style.sass

            @import themes/dark/theme

            // Write your styles here.

  .document
    article.article
      :markdown
        ## Save extension on GitHub

        Now let's save this extension as its own standalone GitHub repo.
        This will allow users to install it as a submodule without getting
        any of the code above the directory where your extension lives.

        A great way to do this is to simply create a new repo on GitHub 
        without a license or readme, and follow the "Push an existing repository"
        instructions.

        <span class="notice">Beware of extensionless files</span> Please
        avoid using files that do not have extensions. For example, `LICENSE`
        should be renamed to `LICENSE.md`

        Extensionless files create issues in your Rails end users

    article.code
      :markdown
        <span>

            $(status-text) git init
            $(status-text) git add -A .
            $(status-text) git commit -am "Starting my new extension"
            # Now you can push this up to Github.

            $(dark) git init
            $(dark) git add -A .
            $(dark) git commit -am "Starting new theme"
            # Now you can push this up to Github.

