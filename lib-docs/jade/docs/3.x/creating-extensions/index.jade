extends ../_layout

block hero-title
  h1 Adding Extensions

block variables
  - var showFooter = false
  - var title = "Creating Extensions"

block subMenuVars
  - var subMenuItem = "getstarted"

block documents
  .document
    article.article
      :markdown 
        # How to create an extension

        An extension is simply a Git repository that a user clones into their
        project. The repository should contain code that builds on core code
        to expose new functionality.

        Because the user's project will already be a git repository. They'll
        install your git repo as a Git submodule. A Git submodule is simply
        a repo in a repo.

        As Kickstart is maintained primarily as a Gulp project, this guide will
        show you how to make extensions by cloning Kickstart itself.

    article.code
      :markdown
        <span>

            # Here's how the user will install your extension
            $ git submodule add git://github.com/yournamehere/myextension.git

  .document
    article.article
      :markdown
        ## Create a project to contain your extensions

        For your first extension, you're going to create two repositories. The
          first will be a project to contain all the extensions you build from now on.
          this is what we'll mean when we say "project" from here on.

        The second will be the extension itself. This is a highly recommended workflow
          for extension development.

        First, clone the Kickstart repo.

    article.code
      :markdown
        <span>

            # Create a "My Extensions" directory and cd into it.
            $(~) git clone git@github.com:ajkochanowicz/kickstart.git myextensions --depth 1 && cd myextensions

  .document
    article.article
      :markdown
        Now you'll need to install all the necessary Kickstart dependencies with the following commands.

    article.code
      :markdown
        <span>

            $(myextensions) sudo npm install -g gulp && npm install . && bundle

  .document
    article.article
      :markdown
        If everything worked correctly, you should be able to run the `gulp` command. This
          will automatically launch a browser with a basic sample webpage.

        If you'd like to save your project environment on github, you can remove the existing
          `origin` remote from `.git/config` and add your own (Using the instructions provided 
          on Github after creating a new repo is a great way to do this.)

    article.code
      :markdown
        <span>

            $(myextensions) gulp

  .document
    article.article
      :markdown
        ## Create your first extension

        You can now use the following steps for your first and every new extension you wish to create.

        Take a look in the `lib/sass/vendor` directory. This is where you'll create your first
        extension. You should see there is already an extension there called "switch."

        You're welcome to simply copy and rename this extension if you need inspiration. Otherwise,
        this guide will show you how to create a new one from scratch.

    article.code
      :markdown
        <span>

            $(myextensions) cd lib/sass/vendor && ls -l
            total 8
            -rw-r--r--  _index.sass
            drwxr-xr-x  switch

  .document
    article.article
      :markdown
        Let's create an extension with the name "foo-extension"

        You should then see this directory created alongside the `switch` extension.

    article.code
      :markdown
        <span>

            $(vendor) git init foo-extension

            $(vendor) ls
            _index.sass switch foo-extension

  .document
    article.article
      :markdown
        Before we `cd` into your new extension, let's add your extension as a vendor
        asset for your project.

        Edit `lib/sass/vendor/_index.sass` as such:

    article.code
      :markdown
        <span>

            // Vendor libraries
            // ================
            // 3rd party additions to the Kickstart UI library should
            // be indexed here.

            // e.g. @import datepicker
            @import switch/switch
            @import foo-extension/index.sass

            body
              display: inherit

  .document
    article.article
      :markdown
        Now we just need to add that "index.sass" in foo-extension.

        `cd` into foo-extension and create it. For now, it doesn't 
        need to create anything. It just needs to exist.

    article.code
      :markdown
        <span>

            $(vendor) cd foo-extension && touch index.sass

  .document
    article.article.article-full
      :markdown
        ### Save extension on GitHub

        Now let's save this extension as its own standalone GitHub repo.
        This will allow users to install it as a submodule without getting
        any of the code above your `foo-extension` directory.

        A great way to do this is to simply create a new repo on GitHub 
        without a license or readme, and follow the "Push an existing repository"
        instructions.

        <span class="notice">Beware of extensionless files</span> Please
        avoid using files that do not have extensions. For example, `LICENSE`
        should be renamed to `LICENSE.md`

        Extensionless files create issues in your Rails end users

  .document
    article.article.article-full
      :markdown
        ### Start coding

        You're now fully setup to write the code for your extension.
        Anything you write to `foo-extension/index.sass` will be availble
        to your end user.

        Let's write some code in index.sass to get started.

  .document
    article.article
      :markdown
        In this example, foo-extension will be a sass mixin that
        uses the colors defined in the user's Kickstart theme and applies them
        to text.

        Let's create the mixin that does that. We'll also leave the user with
        some documentation in `foo-extension` that helps them get set up.

    article.code
      :markdown
        <span>

            // In foo-extension/index.sass

            =status-text($type: 'good')
              color: $color

            // In foo-extension/README.md

            # STATUS TEXT

            Status text applies Kickstart colors to text.

            After @importing foo-extension/index.sass to your vendor/_index.sass
            file, use the status-text mixin in your sass files.
